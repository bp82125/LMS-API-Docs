openapi: 3.0.1
info:
  title: Hệ thống quản lí thư viện
  description:
    "Báo cáo nhóm môn học Quản trị dữ liệu CT467, đề tài: Xây dựng hệ thống quản lí thư viện. \n\n
    \ Xem thêm về đề tài này ở đây: \n\n
    \ - Front end: [https://github.com/nTrong128/LibraryManagementSystem](https://github.com/nTrong128/LibraryManagementSystem) \n\n
    \ - Back end: [https://github.com/bp82125/qtdt-be](https://github.com/bp82125/qtdt-be)
    \  "
  version: 1.0.0
externalDocs:
  description: Source của trang documentation này
  url: https://github.com/bp82125/qtdt-api-docs
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: Book
    description: Sách
  - name: Author
    description: Tác giả
  - name: Genre
    description: Thể loại sách
  - name: Publisher
    description: Nhà xuất bản
  - name: Reader
    description: Độc giả
  - name: Library card
    description: Thẻ thư viện
  - name: Employee
    description: Nhân viên
  - name: Checkout
    description: Mượn sách
  - name: Checkout detail
    description: Chi tiết mượn sách
paths:
  /book:
    get:
      summary: Get all books
      operationId: getAllBooks
      tags:
        - Book
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Success response with a list of books
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    description: Indicates whether the request was successful.
                    example: true
                  statusCode:
                    type: integer
                    description: HTTP status code.
                    example: 200
                  message:
                    type: string
                    description: Description of the response.
                    example: "Books retrieved successfully"
                  data:
                    type: array
                    description: List of books
                    items:
                      $ref: "../../swagger.yaml#/components/schemas/Book"
              example:
                flag: true
                statusCode: 200
                message: "Books retrieved successfully"
                data:
                  - id: "9780439554930"
                    title: "Harry Potter and the Philosopher's Stone"
                    authorId: "123"
                    genreId: "456"
                    publisherId: "789"
                    publicationYear: 1997
                  - id: "9780439554893"
                    title: "Harry Potter and the Chamber of Secrets"
                    authorId: "123"
                    genreId: "456"
                    publisherId: "789"
                    publicationYear: 1998

    post:
      summary: Create a new book
      operationId: createBook
      tags:
        - Book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "../../swagger.yaml#/components/schemas/Book"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Success response with the created book details
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "Book created successfully"
                  data:
                    $ref: "../../swagger.yaml#/components/schemas/Book"
        "400":
          description: Bad request, invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Bad request, invalid input data"
  /book/{id}:
    get:
      summary: Get a book by ID
      operationId: getBookById
      tags:
        - Book
      parameters:
        - name: id
          in: path
          description: ID of the book to retrieve
          example: "123"
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Success response with the book details
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Book retrieved successfully"
                  data:
                    $ref: "../../swagger.yaml#/components/schemas/Book"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Book not found"
                  data:
                    example: null

    put:
      summary: Update an existing book
      operationId: updateBook
      tags:
        - Book
      parameters:
        - name: id
          in: path
          description: ID of the book to update
          required: true
          example: 123
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "../../swagger.yaml#/components/schemas/Book"
      responses:
        "200":
          description: Success response with the updated book details
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Book updated successfully"
                  data:
                    $ref: "../../swagger.yaml#/components/schemas/Book"
        "400":
          description: Bad request, invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Bad request, invalid input data"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Book not found"

    delete:
      summary: Delete a book
      operationId: deleteBook
      tags:
        - Book
      parameters:
        - name: id
          in: path
          description: ID of the book to delete
          required: true
          example: 123
          schema:
            type: string
      responses:
        "204":
          description: Book successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 204
                  message:
                    type: string
                    example: "Deleted success"
                  data:
                    example: null

        "404":
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  flag:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Book not found"
                  data:
                    example: null

components:
  schemas:
    Book:
      $ref: ./schemas/book.yaml
    Author:
      $ref: ./schemas/author.yaml
    Genre:
      $ref: ./schemas/genre.yaml
    Reader:
      $ref: ./schemas/reader.yaml
    Library card:
      $ref: ./schemas/library_card.yaml
    Employee:
      $ref: ./schemas/employee.yaml
    Checkout:
      $ref: ./schemas/checkout.yaml
    Checkout detail:
      $ref: ./schemas/checkout_detail.yaml

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
