get:
  summary: Get a book by ID
  operationId: getBookById
  tags:
    - Book
  parameters:
    - name: bookId
      in: path
      description: ID of the book to retrieve
      example: "1"
      required: true
      schema:
        type: long
  responses:
    "200":
      description: Success response with the book details
      content:
        application/json:
          schema:
            type: object
            properties:
              flag:
                type: boolean
                example: true
              statusCode:
                type: integer
                example: 200
              data:
                $ref: "../../swagger.yaml#/components/responses/Book"
              message:
                type: string
                example: "Book retrieved successfully"
              error:
                example: null

    "404":
      description: Book not found
      content:
        application/json:
          schema:
            type: object
            properties:
              flag:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 404
              data:
                example: null
              message:
                type: string
                example: "Can not find Book with id: 4"
              error:
                example: null

put:
  summary: Update an existing book
  operationId: updateBook
  tags:
    - Book
  parameters:
    - name: bookId
      in: path
      description: ID of the book to update
      required: true
      example: 1
      schema:
        type: long
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "../../swagger.yaml#/components/requestBodies/Book"
  security:
    - bearerAuth: []
  responses:
    "200":
      description: Success response with the updated book details
      content:
        application/json:
          schema:
            type: object
            properties:
              flag:
                type: boolean
                example: true
              statusCode:
                type: integer
                example: 200
              message:
                type: string
                example: "Book updated successfully"
              data:
                $ref: "../../swagger.yaml#/components/responses/Book"
              error:
                example: null
    "400":
      description: Bad request, invalid input data
      content:
        application/json:
          schema:
            type: object
            properties:
              flag:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 400
              data:
                examle: null
              message:
                type: string
                example: "Validation failed"
              error:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      description: The name of the field with the validation error.
                    error:
                      type: string
                      description: The error message associated with the field.
                example:
                  - field: "authorId"
                    error: "Author ID must be positive"
                  - field: "categoryId"
                    error: "Category ID must be positive"
                  - field: "publisherId"
                    error: "Publisher ID must be positive"
    "404":
      description: Book not found
      content:
        application/json:
          schema:
            type: object
            properties:
              flag:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 404
              data:
                example: null
              message:
                type: string
                example: "Can not find Book with id: 4"
              error:
                example: null

delete:
  summary: Delete a book
  operationId: deleteBook
  tags:
    - Book
  parameters:
    - name: bookId
      in: path
      description: ID of the book to delete
      required: true
      example: 1
      schema:
        type: long
  security:
    - bearerAuth: []
  responses:
    "200":
      description: Book successfully deleted
      content:
        application/json:
          schema:
            type: object
            properties:
              flag:
                type: boolean
                example: true
              statusCode:
                type: integer
                example: 200
              data:
                example: null
              message:
                type: string
                example: "Book deleted successfully"
              error:
                example: null

    "404":
      description: Book not found
      content:
        application/json:
          schema:
            type: object
            properties:
              flag:
                type: boolean
                example: false
              statusCode:
                type: integer
                example: 404
              data:
                example: null
              message:
                type: string
                example: "Can not find Book with id: 1"
              error:
                example: null
